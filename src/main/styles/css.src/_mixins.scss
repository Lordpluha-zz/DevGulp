// Mixins
@mixin adaptive-value ($property, $minSize, $maxSize, $type) {
	$addSize: $maxSize - $minSize;
	// Меньше контейнера
	@if $type == 1 {
		// Присваивание свойству минимальной величины
		#{$property}: $maxSize + px;

		// Когда размер страницы меньше контентного блока (узкие Планшеты и телефоны)
		@media (max-width: #{$ContentMaxWidth + px}) {
			
			// Свойство = МинВелич + ДобавРазмер * Отступы_от_Content / Максимальное_изменение_Content
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - #{$SiteMinWidth+px}) / #{$ContentMaxWidth - $SiteMinWidth}));
		}
	// Если больше контейнера
	} @else if $type == 2 {
		#{$property}: $maxSize + px;
		@media (min-width: #{$ContentMaxWidth + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - #{$SiteMinWidth}px) / #{$SiteMaxWidth - $SiteMinWidth}));
		}
	// Всегда
	} @else if $type == 3 {
		#{$property}: calc(#{$SiteMaxWidth + px} + #{$addSize} * ((100vw - #{$SiteMinWidth}px) / #{$SiteMaxWidth - #{$SiteMinWidth}} ) );
	}
}

// Последвательная крассивая прогрузка для наследников .anim-elem
@mixin beaut_blocks($NumOfElems, $DelayCoof, $AnimDelay) {
	$AnimDelayV: $AnimDelay+.1;
					
	@for $i from 1 through $NumOfElems {
		&:nth-child(#{$i}) {
			-webkit-transition-delay: $AnimDelayV;
	   		   -moz-transition-delay: $AnimDelayV;
	   		    -ms-transition-delay: $AnimDelayV;
	   		     -o-transition-delay: $AnimDelayV;
	   		        transition-delay: $AnimDelayV;
		}

		$AnimDelayV: $AnimDelayV+$DelayCoof;
	}
}